# Three axes with nodes mapped by connectivity
#
# axisin - in degree only
# axisout - out degree only
# axisall - in/out degree
#
# Each axis contains three segments, based on 
# the node's neighbour's connectivity.
#
# segment 1 (inner)  - total neighbour degree < 3
# segment 2 (middle) - total neighbour degree 3-5
# segment 3 (outer)  - total neighbour degree >=6
#
# Node position score taken from connectivity (number of edge)
# Node position sorted ascending (inside of figure = lower values)
# Node position by rank order (ordered score)

<axes>

<axis>
name  = axisin_low
color = lgreen
rule  = !node_out && node_neighbours_all_strict < 3 && node_in
node_position        = score
node_position_sort   = num
node_index_position  = yes
</axis>

<axis>
name  = axisin_medium
color = green
rule  = !node_out && node_neighbours_all_strict >=3 && node_neighbours_all_strict < 6 && node_in
node_position        = score
node_position_sort   = num
node_index_position  = yes
</axis>

<axis>
name  = axisin_high
color = dgreen
rule  = !node_out && node_neighbours_all_strict >= 6 && node_in
node_position        = score
node_position_sort   = num
node_index_position  = yes
</axis>

<axis>
name  = axisout_low
rule  = !node_in && node_neighbours_all_strict < 3 && node_out
color = lyellow
node_position        = score
node_position_sort   = num
node_index_position  = yes
</axis>

<axis>
name  = axisout_medium
rule  = !node_in && node_neighbours_all_strict >= 3 && node_neighbours_all_strict < 6 && node_out
color = yellow
node_position        = score
node_position_sort   = num
node_index_position  = yes
</axis>

<axis>
name  = axisout_high
rule  = !node_in && node_neighbours_all_strict >= 6 && node_out
color = dyellow
node_position        = score
node_position_sort   = num
node_index_position  = yes
</axis>

<axis>
name  = axisall_low
rule  = node_in && node_neighbours_all_strict < 3 && node_out && node_in + node_out
color = lred
self_connection_hide = yes
node_position        = score
node_position_sort   = num
node_index_position  = yes
</axis>

<axis>
name  = axisall_medium
rule  = node_in && node_neighbours_all_strict >= 3 && node_neighbours_all_strict < 6 && node_out && node_in + node_out
color = red
self_connection_hide = yes
node_position        = score
node_position_sort   = num
node_index_position  = yes
</axis>

<axis>
name  = axisall_high
rule  = node_in && node_neighbours_all_strict >= 6 && node_out && node_in + node_out
color = dred
self_connection_hide = yes
node_position        = score
node_position_sort   = num
node_index_position  = yes
</axis>

</axes>

<links>

<link>
# Each link rule is evaluated in order of appearance
# and as soon as an edge passes the condition, further
# rule testing is short-circuited. In this example,
# the first rule has a condition (rule_node=1) which always
# passes (always true) and therefore because each edge
# triggers this first rule, no other rules are tested.
#
# This is a useful way to turn some or all rules off.
rule_node = 1
show      = yes
</link>

# Rules below are actually never applied, because the
# rule above passes for every edge.

<link>
# degreeout(a) = 2
# AND
# degreeout(b) = 2
rule_node1  = node_all == 2
rule_node2  = node_all == 2
color      = red_a3
z          = 20
thickness  = 2
</link>

<link>
# degreeout(a) = 2
# OR
# degreeout(b) = 2
rule_node  = node_all == 2
color      = blue_a3
z          = 20
thickness  = 1
</link>

# catch-all link rule that matches all other links
# and hides them
<link>
rule_node = 1
show      = no
</link>

</links>

<files>
dir      = output/
segments = segments.txt
links    = links.txt
</files>
